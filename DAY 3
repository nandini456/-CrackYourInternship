#1. Two Sum
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int>mp;
        int n=nums.size();
        
        for(int i=0;i<nums.size();i++)
        {
            if(mp.find(target-nums[i])==mp.end())
            mp[nums[i]]=i;
            else
            {
                return {mp[target-nums[i]],i};
            }
        }
        return {-1,-1};

    }
};
#122. Best Time to Buy and Sell Stock II

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        if(n==1)
        return 0;
        int dp[n][2];
        dp[0][0]=prices[0];
        dp[0][1]=0;
        for(int i=1;i<prices.size();i++)
        {
            dp[i][0]=min(prices[i],prices[i-1]);
            dp[i][1]=max(dp[i-1][1],dp[i-1][1]+(prices[i]-dp[i][0]));
        }
        return dp[n-1][1];
        
    }
};
#974. Subarray Sums Divisible by K

class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int n=nums.size();
        unordered_map<int,int>mp;
        mp[0]=1;
        int ans=0,sum=0;
        for(int i=0;i<n;i++)
        {
            sum=(sum+nums[i])%k;
            if(sum<0)
            sum+=k;
            ans+=mp[sum];
            mp[sum]++;
        }
        return ans;
    }
};
