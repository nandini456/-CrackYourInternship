#287. Find the Duplicate Number
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
    
    int fast=0,slow=0;
    do{
        fast=nums[nums[fast]];
        slow=nums[slow];
    }while(fast!=slow);
    fast=0;
    while(fast!=slow)
    {
        slow=nums[slow];
        fast=nums[fast];
    }
    return fast;
    }
};

#75. Sort Colors
class Solution {
public:
    void sortColors(vector<int>& arr) {
       int low=0,mid=0,high=arr.size()-1;
       while(mid<=high)
       {
            if(arr[mid]==0)
            {
                swap(arr[low],arr[mid]);
                low++;mid++;
            }
            else if(arr[mid]==1)
            {
                mid++;
            }
            else
            {
                swap(arr[mid],arr[high]);
                high--;
            }
       }

    }
};
#26. Remove Duplicates from Sorted Array
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int i=0,j=1;
        while(j<nums.size())
        {
            if(nums[i]!=nums[j])
            {
                i++;
                nums[i]=nums[j];
            }
            j++;
        }
        return i+1;
    }
};
